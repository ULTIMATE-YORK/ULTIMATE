// Type:        DTMC
// Îœode: probabilistic service implementation selection
// States:      283 (1 initial)
// Transitions: 695

//FOREX dtmc model (8 operations with 4 services for each operation)
dtmc

//distribution for probabilistic selection
//evolve distribution probOp1 [4];
const double probOp11=0.25;
const double probOp12=0.25;
const double probOp13=0.25;
const double probOp14=0.25;

//evolve distribution probOp2 [4];
const double probOp21=0.25;
const double probOp22=0.25;
const double probOp23=0.25;
const double probOp24=0.25;

//evolve distribution probOp3 [4];
const double probOp31=0.25;
const double probOp32=0.25;
const double probOp33=0.25;
const double probOp34=0.25;

//evolve distribution probOp4 [4];
const double probOp41=0.25;
const double probOp42=0.25;
const double probOp43=0.25;
const double probOp44=0.25;

//evolve distribution probOp5 [4];
const double probOp51=0.25;
const double probOp52=0.25;
const double probOp53=0.25;
const double probOp54=0.25;

//evolve distribution probOp6 [4];
const double probOp61=0.25;
const double probOp62=0.25;
const double probOp63=0.25;
const double probOp64=0.25;

//evolve distribution probOp7 [4];
const double probOp71=0.25;
const double probOp72=0.25;
const double probOp73=0.25;
const double probOp74=0.25;

//evolve distribution probOp8 [4];
const double probOp81=0.25;
const double probOp82=0.25;
const double probOp83=0.25;
const double probOp84=0.25;


//user-define params parameters
const double pSucc19;
const double pSucc20;
const double pSucc21;
const double pSucc22;
const double pSucc23;
const double pSucc24;
const double pSucc25;
const double pSucc26;


const double op1S1Fail=0.011; //failure probability of service 1 op1
const double op1S2Fail=1-pSucc19; //failure probability of service 2 op1
const double op1S3Fail=0.007; //failure probability of service 3 op1
const double op1S4Fail=0.002; //failure probability of service 4 op1

const double op2S1Fail=1-pSucc20; //failure probability of service 1 op1
const double op2S2Fail=0.005; //failure probability of service 2 op1
const double op2S3Fail=1-pSucc21; //failure probability of service 3 op1
const double op2S4Fail=0.008; //failure probability of service 4 op1

const double op3S1Fail=1-pSucc22; //failure probability of service 1 op3
const double op3S2Fail=1-pSucc23; //failure probability of service 2 op3
const double op3S3Fail=1-pSucc24; //failure probability of service 3 op3
const double op3S4Fail=1-pSucc25; //failure probability of service 4 op3

const double op4S1Fail=0.009; //failure probability of service 1 op4
const double op4S2Fail=1-pSucc26; //failure probability of service 2 op4
const double op4S3Fail=0.006; //failure probability of service 3 op4
const double op4S4Fail=0.004; //failure probability of service 4 op4

const double op5S1Fail=0.005; //failure probability of service 1 op5
const double op5S2Fail=0.004; //failure probability of service 2 op5
const double op5S3Fail=0.002; //failure probability of service 3 op5
const double op5S4Fail=0.008; //failure probability of service 4 op5

const double op6S1Fail=0.008; //failure probability of service 1 op6
const double op6S2Fail=0.005; //failure probability of service 2 op6
const double op6S3Fail=0.004; //failure probability of service 3 op6
const double op6S4Fail=0.009; //failure probability of service 4 op6

const double op7S1Fail=0.014; //failure probability of service 1 op4
const double op7S2Fail=0.007; //failure probability of service 2 op4
const double op7S3Fail=0.009; //failure probability of service 3 op4
const double op7S4Fail=0.013; //failure probability of service 4 op4

const double op8S1Fail=0.019; //failure probability of service 1 op3
const double op8S2Fail=0.008; //failure probability of service 2 op3
const double op8S3Fail=0.011; //failure probability of service 3 op3
const double op8S4Fail=0.014; //failure probability of service 4 op3


const int STEPMAX  = 5;

/////////////
//Workflow
/////////////
module forex
	//local state
	state : [0..19] init 0;
	//Init
	[fxStart]	state = 0 	->	0.66 : (state'=1) + 0.34 : (state'=9);

	//Op1: Market watch
	[startOp1]		state = 1	->	1.0  : (state'=2);  	//invoke op1
	[endOp1Fail]	state = 2 	->	1.0  : (state'=5);	//failed op1
	[endOp1Succ] 	state = 2	->	1.0  : (state'=3) ;  	//succ   op1

	//Op2: Technical Analysis
	[startOp2]		state = 3	->	1.0  : (state'=4);	//invoke op2
	[endOp2Fail]	state = 4	->	1.0  : (state'=5);	//failed op2
	[endOp2Succ]	state = 4	->	1.0  : (state'=17);	//succ   op2

	//Technical analysis result
	[taResult]		state=6 	->	0.61 : (state'=1) + 0.28 : (state'=11) + 0.11 : (state'=7);

	//Op3: Alarm
	[startOp3]	state=7		->	1.0  : (state'=8);
	[endOp3Fail]	state=8		->	1.0  : (state'=5);
	[endOp3Succ]	state=8		->	1.0  : (state'=13);

	//Op4: Fundamental Analysis
	[startOp4]		state=9		-> 	1.0  : (state'=10);
	[endOp4Fail]	state=10	->	1.0  : (state'=5);
	[endOp4Succ]	state=10	->	0.53  : (state'=0) + 0.27 : (state'=11) + 0.20 : (state'=9);

	//Op5: Place Order
	[startOp5]		state=11	->	1.0  : (state'=12);
	[endOp5Fail]	state=12	->	1.0  : (state'=5);
	[endOp5Succ]	state=12	->	1.0  : (state'=13);

	//Op6: Notify trader
	[startOp6]		state=13	->	1.0  : (state'=14);
	[endOp6Fail]	state=14	->	1.0  : (state'=5);
	[endOp6Succ]	state=14	->	1.0  : (state'=15);

	//Op7: Notify trader 2
	[startOp7]		state=15	->	1.0  : (state'=16);
	[endOp7Fail]	state=16	->	1.0  : (state'=5);
	[endOp7Succ]	state=16	->	1.0  : (state'=19);

	//Op7: Notify trader 2
	[startOp8]		state=17	->	1.0  : (state'=18);
	[endOp8Fail]	state=18	->	1.0  : (state'=5);
	[endOp8Succ]	state=18	->	1.0  : (state'=6);

	//End
	[fxFail]		state = 5	->	1.0  : (state'=5);	//failed fx
	[fxSucc]		state = 19	->	1.0  : (state'=19);	//succ   fx
endmodule


/////////////
//Operation 1: Market watch
/////////////

//PROB
module strategyOp1
	operation1 : [0..10] init 0;

	//select a service probabilistically
	[startOp1] 	operation1 = 0 	->	probOp11 : (operation1'=1) + probOp12 : (operation1'=10) + probOp13 : (operation1'=6) + probOp14 : (operation1'=9); 

	[checkS11]		operation1 = 1	->	(1) : (operation1'=2);
	[runS11]     	operation1 = 2  ->	1-op1S1Fail : (operation1'=8) + op1S1Fail : (operation1'=7); 		

	[checkS12]		operation1 = 10	->	(1) : (operation1'=3);
	[runS12]     	operation1 = 3  ->	1-op1S2Fail : (operation1'=8) + op1S2Fail : (operation1'=7); 		

	[checkS13]		operation1 = 6	->	(1) : (operation1'=4);
	[runS13]     	operation1 = 4  ->	1-op1S3Fail : (operation1'=8) + op1S3Fail : (operation1'=7);

	[checkS14]		operation1 = 9 	->	(1) : (operation1'=10);
	[runS14]		operation1 = 5	->	1-op1S4Fail : (operation1'=8) + op1S4Fail : (operation1'=7);

	[endOp1Fail]	operation1 = 7	->	1.0 : (operation1'=0);//failed
	[endOp1Succ]	operation1 = 8	->	1.0 : (operation1'=0); //succ
endmodule




/////////////
//Operation 2: Technical Analysis
/////////////


//PROB
module strategyOp2
	operation2 : [0..10] init 0;

	//select a service probabilistically
	[startOp2] 		operation2 = 0 	->	probOp21 : (operation2'=1) + probOp22 : (operation2'=10) + probOp23 : (operation2'=6) + probOp24 : (operation2'=9); 

	[checkS21]		operation2 = 1	->	(1) : (operation2'=2);
	[runS21]     	operation2 = 2  ->	1-op2S1Fail : (operation2'=8) + op2S1Fail : (operation2'=7); 		

	[checkS22]		operation2 = 10	->	(1) : (operation2'=3);
	[runS22]     	operation2 = 3  ->	1-op2S2Fail : (operation2'=8) + op2S2Fail : (operation2'=7); 		

	[checkS23]		operation2 = 6	->	(1) : (operation2'=4);
	[runS23]     	operation2 = 4  ->	1-op2S3Fail : (operation2'=8) + op2S3Fail : (operation2'=7);

	[checkS24]		operation2 = 9 	->	(1) : (operation2'=10);
	[runS24]		operation2 = 5	->	1-op2S4Fail : (operation2'=8) + op2S4Fail : (operation2'=7);

	[endOp2Fail]	operation2 = 7	->	1.0 : (operation2'=0);//failed
	[endOp2Succ]	operation2 = 8	->	1.0 : (operation2'=0); //succ
endmodule



/////////////
//Operation 3: Alarm
/////////////

//PROB
module strategyOp3
	operation3 : [0..10] init 0;

	//select a service probabilistically
	[startOp3] 		operation3 = 0 	->	probOp31 : (operation3'=1) + probOp32 : (operation3'=10) + probOp33 : (operation3'=6) + probOp34 : (operation3'=9); 

	[checkS31]		operation3 = 1	->	(1) : (operation3'=2);
	[runS31]     	operation3 = 2  ->	1-op3S1Fail : (operation3'=8) + op3S1Fail : (operation3'=7); 		

	[checkS32]		operation3 = 10	->	(1) : (operation3'=3);
	[runS32]     	operation3 = 3  ->	1-op3S2Fail : (operation3'=8) + op3S2Fail : (operation3'=7); 		

	[checkS33]		operation3 = 6	->	(1) : (operation3'=4);
	[runS33]     	operation3 = 4  ->	1-op3S3Fail : (operation3'=8) + op3S3Fail : (operation3'=7);

	[checkS34]		operation3 = 9 	->	(1) : (operation3'=10);
	[runS34]		operation3 = 5	->	1-op3S4Fail : (operation3'=8) + op3S4Fail : (operation3'=7);

	[endOp3Fail]	operation3 = 7	->	1.0 : (operation3'=0);//failed
	[endOp3Succ]	operation3 = 8	->	1.0 : (operation3'=0); //succ
endmodule




/////////////
//Operation 4: Fundamental Analysis
/////////////


//PROB
module strategyOp4
	operation4 : [0..10] init 0;

	//select a service probabilistically
	[startOp4] 		operation4 = 0 	->	probOp41 : (operation4'=1) + probOp42 : (operation4'=10) + probOp43 : (operation4'=6) + probOp44 : (operation4'=9); 

	[checkS41]		operation4 = 1	->	(1) : (operation4'=2);
	[runS41]     	operation4 = 2  ->	1-op4S1Fail : (operation4'=8) + op4S1Fail : (operation4'=7); 		

	[checkS42]		operation4 = 10	->	(1) : (operation4'=3);
	[runS42]     	operation4 = 3  ->	1-op4S2Fail : (operation4'=8) + op4S2Fail : (operation4'=7); 		

	[checkS43]		operation4 = 6	->	(1) : (operation4'=4);
	[runS43]     	operation4 = 4  ->	1-op4S3Fail : (operation4'=8) + op4S3Fail : (operation4'=7);

	[checkS44]		operation4 = 9 	->	(1) : (operation4'=10);
	[runS44]		operation4 = 5	->	1-op4S4Fail : (operation4'=8) + op4S4Fail : (operation4'=7);

	[endOp4Fail]	operation4 = 7	->	1.0 : (operation4'=0);//failed
	[endOp4Succ]	operation4 = 8	->	1.0 : (operation4'=0); //succ
endmodule




/////////////
//Operation 5: 
/////////////

//PROB
module strategyOp5
	operation5 : [0..10] init 0;

	//select a service probabilistically
	[startOp5] 		operation5 = 0 	->	probOp51 : (operation5'=1) + probOp52 : (operation5'=10) + probOp53 : (operation5'=6) + probOp54 : (operation5'=9); 

	[checkS51]		operation5 = 1	->	(1) : (operation5'=2);
	[runS51]     	operation5 = 2  ->	1-op5S1Fail : (operation5'=8) + op5S1Fail : (operation5'=7); 		

	[checkS52]		operation5 = 10	->	(1) : (operation5'=3);
	[runS52]     	operation5 = 3  ->	1-op5S2Fail : (operation5'=8) + op5S2Fail : (operation5'=7); 		

	[checkS53]		operation5 = 6	->	(1) : (operation5'=4);
	[runS53]     	operation5 = 4  ->	1-op5S3Fail : (operation5'=8) + op5S3Fail : (operation5'=7);

	[checkS54]		operation5 = 9 	->	(1) : (operation5'=10);
	[runS54]		operation5 = 5	->	1-op5S4Fail : (operation5'=8) + op5S4Fail : (operation5'=7);

	[endOp5Fail]	operation5 = 7	->	1.0 : (operation5'=0);//failed
	[endop5Succ]	operation5 = 8	->	1.0 : (operation5'=0); //succ
endmodule


/////////////
//Operation 6: Notify trader
/////////////

//PROB
module strategyOp6
	operation6 : [0..10] init 0;

	//select a service probabilistically
	[startOp6] 		operation6 = 0 	->	probOp61 : (operation6'=1) + probOp62 : (operation6'=10) + probOp63 : (operation6'=6) + probOp64 : (operation6'=9); 

	[checkS61]		operation6 = 1	->	(1) : (operation6'=2);
	[runS61]     	operation6 = 2  ->	1-op6S1Fail : (operation6'=8) + op6S1Fail : (operation6'=7); 		

	[checkS62]		operation6 = 10	->	(1) : (operation6'=3);
	[runS62]     	operation6 = 3  ->	1-op6S2Fail : (operation6'=8) + op6S2Fail : (operation6'=7); 		

	[checkS63]		operation6 = 6	->	(1) : (operation6'=4);
	[runS63]     	operation6 = 4  ->	1-op6S3Fail : (operation6'=8) + op6S3Fail : (operation6'=7);

	[checkS64]		operation6 = 9 	->	(1) : (operation6'=10);
	[runS64]		operation6 = 5	->	1-op6S4Fail : (operation6'=8) + op6S4Fail : (operation6'=7);

	[endOp6Fail]	operation6 = 7	->	1.0 : (operation6'=0);//failed
	[endOp6Succ]	operation6 = 8	->	1.0 : (operation6'=0); //succ
endmodule




/////////////
//Operation 7: Notify trader 2
/////////////

//PROB
module strategyOp7
	operation7 : [0..10] init 0;

	//select a service probabilistically
	[startOp7] 		operation7 = 0 	->	probOp71 : (operation7'=1) + probOp72 : (operation7'=10) + probOp73 : (operation7'=6) + probOp74 : (operation7'=9); 

	[checkS71]		operation7 = 1	->	(1) : (operation7'=2);
	[runS71]     	operation7 = 2  ->	1-op7S1Fail : (operation7'=8) + op7S1Fail : (operation7'=7); 		

	[checkS72]		operation7 = 10	->	(1) : (operation7'=3);
	[runS72]     	operation7 = 3  ->	1-op7S2Fail : (operation7'=8) + op7S2Fail : (operation7'=7); 		

	[checkS73]		operation7 = 6	->	(1) : (operation7'=4);
	[runS73]     	operation7 = 4  ->	1-op7S3Fail : (operation7'=8) + op7S3Fail : (operation7'=7);

	[checkS74]		operation7 = 9 	->	(1) : (operation7'=10);
	[runS74]		operation7 = 5	->	1-op7S4Fail : (operation7'=8) + op7S4Fail : (operation7'=7);

	[endOp7Fail]	operation7 = 7	->	1.0 : (operation7'=0);//failed
	[endOp7Succ]	operation7 = 8	->	1.0 : (operation7'=0); //succ
endmodule



/////////////
//Operation 8: Notify trader 3
/////////////

//PROB
module strategyOp8
	operation8 : [0..10] init 0;

	//select a service probabilistically
	[startOp8] 		operation8 = 0 	->	probOp81 : (operation8'=1) + probOp82 : (operation8'=10) + probOp83 : (operation8'=6) + probOp84 : (operation8'=9); 

	[checkS81]		operation8 = 1	->	(1) : (operation8'=2);
	[runS81]     	operation8 = 2  ->	1-op8S1Fail : (operation8'=8) + op8S1Fail : (operation8'=7); 		

	[checkS82]		operation8 = 10	->	(1) : (operation8'=3);
	[runS82]     	operation8 = 3  ->	1-op8S2Fail : (operation8'=8) + op8S2Fail : (operation8'=7); 		

	[checkS83]		operation8 = 6	->	(1) : (operation8'=4);
	[runS83]     	operation8 = 4  ->	1-op8S3Fail : (operation8'=8) + op8S3Fail : (operation8'=7);

	[checkS84]		operation8 = 9 	->	(1) : (operation8'=10);
	[runS84]		operation8 = 5	->	1-op8S4Fail : (operation8'=8) + op8S4Fail : (operation8'=7);

	[endOp8Fail]	operation8 = 7	->	1.0 : (operation8'=0);//failed
	[endOp8Succ]	operation8 = 8	->	1.0 : (operation8'=0); //succ
endmodule




////////////
//Rewards
////////////
rewards "time"
	//OP1: PROB
	operation1 = 2 & (STRATEGYOP1=0) : 2.5;
	operation1 = 3 & (STRATEGYOP1=0) : 1.8;
	operation1 = 4 & (STRATEGYOP1=0) : 2.1;
	operation1 = 5 & (STRATEGYOP1=0) : 1.6;

	//OP2: ROB
	operation2 = 2 & (STRATEGYOP2=0) : 2.2 ;
	operation2 = 3 & (STRATEGYOP2=0) : 3.2 ;
	operation2 = 4 & (STRATEGYOP2=0) : 3.8 ;
	operation2 = 5 & (STRATEGYOP2=0) : 4.0 ;
	
	//OP3: PROB
	operation3 = 2 & (STRATEGYOP2=0) : 1.1 ;
	operation3 = 3 & (STRATEGYOP2=0) : 1.0 ;
	operation3 = 4 & (STRATEGYOP2=0) : 2.2 ;
	operation3 = 5 & (STRATEGYOP2=0) : 1.9 ;

	//OP4: PROB
	operation4 = 2 & (STRATEGYOP4=0) : 3.8 ;
	operation4 = 3 & (STRATEGYOP4=0) : 3.9 ;
	operation4 = 4 & (STRATEGYOP4=0) : 3.7 ;
	operation4 = 5 & (STRATEGYOP4=0) : 3.4 ;

	//OP5: PROB
	operation5 = 2 & (STRATEGYOP5=0) : 3.9 ;
	operation5 = 3 & (STRATEGYOP5=0) : 3.6 ;
	operation5 = 4 & (STRATEGYOP5=0) : 3.1 ;
	operation5 = 5 & (STRATEGYOP5=0) : 4.4 ;

	//OP6: PROB
	operation6 = 2 & (STRATEGYOP6=0) : 4.2 ;
	operation6 = 3 & (STRATEGYOP6=0) : 3.1 ;
	operation6 = 4 & (STRATEGYOP6=0) : 2.1 ;
	operation6 = 5 & (STRATEGYOP6=0) : 4.5 ;

	//OP7: PROB
	operation7 = 2 & (STRATEGYOP7=0) : 5.2 ;
	operation7 = 3 & (STRATEGYOP7=0) : 3.3 ;
	operation7 = 4 & (STRATEGYOP7=0) : 4.1 ;
	operation7 = 5 & (STRATEGYOP7=0) : 4.5 ;

	//OP8: PROB
	operation8 = 2 & (STRATEGYOP8=0) : 4.2 ;
	operation8 = 3 & (STRATEGYOP8=0) : 2.3 ;
	operation8 = 4 & (STRATEGYOP8=0) : 2.9 ;
	operation8 = 5 & (STRATEGYOP8=0) : 3.6 ;
endrewards


rewards "cost"
	//OP1: PROB
	operation1 = 2 & (STRATEGYOP1=0) : 3;
	operation1 = 3 & (STRATEGYOP1=0) : 15;
	operation1 = 4 & (STRATEGYOP1=0) : 8;
	operation1 = 5 & (STRATEGYOP1=0) : 18;

	//OP2: ROB
	operation2 = 2 & (STRATEGYOP2=0) : 13 ;
	operation2 = 3 & (STRATEGYOP2=0) : 6  ;
	operation2 = 4 & (STRATEGYOP2=0) : 4  ;
	operation2 = 5 & (STRATEGYOP2=0) : 3  ; 
	
	//OP3: PROB
	operation3 = 2 & (STRATEGYOP2=0) : 19 ;
	operation3 = 3 & (STRATEGYOP2=0) : 22 ;
	operation3 = 4 & (STRATEGYOP2=0) : 10 ;
	operation3 = 5 & (STRATEGYOP2=0) : 11 ;

	//OP4: PROB
	operation4 = 2 & (STRATEGYOP4=0) : 3.8 ;
	operation4 = 3 & (STRATEGYOP4=0) : 1.5 ;
	operation4 = 4 & (STRATEGYOP4=0) : 10  ;
	operation4 = 5 & (STRATEGYOP4=0) : 13  ;

	//OP5: PROB
	operation5 = 2 & (STRATEGYOP5=0) : 6 ;
	operation5 = 3 & (STRATEGYOP5=0) : 8 ;
	operation5 = 4 & (STRATEGYOP5=0) : 12 ;
	operation5 = 5 & (STRATEGYOP5=0) : 3.3 ;

	//OP6: PROB
	operation6 = 2 & (STRATEGYOP6=0) : 9.5  ;
	operation6 = 3 & (STRATEGYOP6=0) : 12   ;
	operation6 = 4 & (STRATEGYOP6=0) : 13.5 ;
	operation6 = 5 & (STRATEGYOP6=0) : 7    ;  

	//OP7: PROB
	operation7 = 2 & (STRATEGYOP7=0) : 3.2 ;
	operation7 = 3 & (STRATEGYOP7=0) : 8.3 ;
	operation7 = 4 & (STRATEGYOP7=0) : 7.1 ;
	operation7 = 5 & (STRATEGYOP7=0) : 6.5 ;

	//OP8: PROB
	operation8 = 2 & (STRATEGYOP8=0) : 6.2  ;
	operation8 = 3 & (STRATEGYOP8=0) : 12.2 ;
	operation8 = 4 & (STRATEGYOP8=0) : 8.9  ;
	operation8 = 5 & (STRATEGYOP8=0) : 6.6  ;
endrewards


const int STRATEGYOP1 =1;
const int STRATEGYOP2 =1;
const int STRATEGYOP3 =1;
const int STRATEGYOP4 =1;
const int STRATEGYOP5 =1;
const int STRATEGYOP6 =1;
const int STRATEGYOP7 =1;
const int STRATEGYOP8 =1;
